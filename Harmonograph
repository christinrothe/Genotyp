import processing.pdf.*; //...

void setup(){
  size(1200, 1200);
  frameRate(20);
  smooth(90);
}

void draw(){
  beginRecord(PDF, "frame" + hour() + minute() + second() + millis() + ".pdf"); //save pdf

  background(255);
  simulateHarmonograph(); 

        fill(90, 20, 146);
        text("[translate R]", 20, 140);  //shows r_value
        text(r, 20, 155);
        text("[translate V]", 20, 170); //shows v_value
        text(v, 20, 185);
        
        translate(0, -600); 
        for (int i = 0; i < 1; i++) {
        float p = random(0, 1);
    //println(p);
        float u = random(590, 610);
    //println(u);
        float l = random(0, +360);
    //println(p);

    for (int x=0; x < 60; x++) {
      for (int y=0; y < 60; y++) {
          
          pushMatrix();
          translate(x * r, y * v); //r & v from harmonograph
          strokeWeight(2);
          noFill();
          stroke(0);
          beginShape();
          vertex(a, b);
          vertex(a1, b1);
          vertex(a2, b2);
          endShape();
          popMatrix();
          
          int s = second();
          println(s);

      }
    }
  }
    endRecord(); //...
}


NEW TAB
Harmonograph:

float freqX = 122;
float freqY = 0.7;
float freqS = .5;
float damping = .9999f;
float amplitude = 100;



float t = 0;
float r = 0;
float v = 0; 


  void simulateHarmonograph() {
  t += 1f / frameRate;
  amplitude = amplitude * damping;
  r = amplitude * sin(freqX * t) + amplitude * sin(freqS * t);
  v = amplitude * sin(freqY * t);
  println(r, v);
}


Int:

int x = 430;
int x2 = x + 150;
int a = 0 ;
int b = 750;
int a1 = x2;
int b1 = b;
int a2 = a1/2;
int b2 = 900;

  
